# @author :  Hao.Li
# @time : 2023-04-18
# @file : np_one.py
# @describe :
# 导入模块
#
# 1. 可以使用numpy的函数来创建特定形状的数组，例如np.zeros((2, 4))可以创建一个2行4列的全0数组，而np.ones((3, 3))可以创建一个3行3列的全1数组。
#
# 2. 在进行数组运算时，可以使用numpy的广播功能，避免使用循环进行逐个元素的计算。例如，可以使用a + b来计算数组a中每个元素加上b中对应位置的元素的和，而不需要使用循环逐个相加。
#
# 3. 在进行数组操作时，可以使用inplace操作来避免创建新的数组对象，从而节省内存。例如，可以使用a += b来将数组b中的元素加到数组a中，而不需要创建一个新的数组对象。
#
# 4. 在进行数组操作时，可以使用numpy的函数来避免使用循环进行逐个元素的计算。例如，可以使用np.sum(a)来计算数组a中所有元素的和，而不需要使用循环逐个相加。
#
# 5. 在进行数组操作时，可以使用numpy的函数来避免使用Python内置的函数进行逐个元素的计算。例如，可以使用np.exp(a)来计算数组a中每个元素的指数函数值，而不需要使用循环逐个计算。
#
# 6. 在进行数组操作时，可以使用numpy的函数来避免使用Python内置的函数进行逐个元素的计算。例如，可以使用np.sqrt(a)来计算数组a中每个元素的平方根，而不需要使用循环逐个计算。
#
# 7. 在进行数组操作时，可以使用numpy的函数来避免使用Python内置的函数进行逐个元素的计算。例如，可以使用np.sin(a)来计算数组a中每个元素的正弦函数值，而不需要使用循环逐个计算。
#
# 8. 在进行数组操作时，可以使用numpy的函数来避免使用Python内置的函数进行逐个元素的计算。例如，可以使用np.cos(a)来计算数组a中每个元素的余弦函数值，而不需要使用循环逐个计算。
#
# 9. 在进行数组操作时，可以使用numpy的函数来避免使用Python内置的函数进行逐个元素的计算。例如，可以使用np.tan(a)来计算数组a中每个元素的正切函数值，而不需要使用循环逐个计算。
#
# 10. 在进行数组操作时，可以使用numpy的函数来避免使用Python内置的函数进行逐个元素的计算。例如，可以使用np.log(a)来计算数组a中每个元素的自然对数值，而不需要使用循环逐个计算。


import numpy as np

a = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
# 输出数组和数组格式
print(a, type(a))
# 打印第一行
print(a[0])
# 打印第三列(根据索引打印)
print(a[:, 2])
# 数组中的运算一般都对应着数组与数组之间的运算
# 只加一维的就会第一行相加，数量需要相同
b = np.array([1, 1, 1, 1])
c = np.array([[1, 1, 1, 2], [2, 2, 2, 1]])
print(a + b)
print(a + c)
# 将二维数组变成一维
d = a.flatten()
print(d)
# 将d拆分成4行2列的数组
print(d.reshape(4, 2))
s1 = np.array([2, 3])
s2 = np.array([4, 5])
s3 = np.array([6, 7])
# 将这三个数组进行合并
s = np.array([s1, s2, s3])
e = s.flatten()
print(e, type(e))
